// ... (previous code)

const handleDeleteTask = (categoryId, taskId) => {
    setCategory((prevCategory) =>
        prevCategory.map((cat) =>
            cat.id === categoryId
                ? { ...cat, tasks: cat.tasks.filter((task) => task.id !== taskId) }
                : cat
        )
    );
};

// ... (previous code)

return (
    <>
        <div>
            {/* ... (previous code) */}
            <ul className="categorylists">
                {category.map((cate) => (
                    <TextInput
                        key={cate.id}
                        cate={cate.cate}
                        inputTask={cate.inputTask}
                        handleChange={(e) => {
                            const newInputTask = e.target.value;
                            setCategory((prevCategory) =>
                                prevCategory.map((prevCat) =>
                                    prevCat.id === cate.id
                                        ? { ...prevCat, inputTask: newInputTask }
                                        : prevCat
                                )
                            );
                        }}
                        handleCreateTask={() => handleCreateTask(cate.id)}
                        handleDeleteTask={(taskId) => handleDeleteTask(cate.id, taskId)}
                        tasks={cate.tasks}
                    />
                ))}
            </ul>
        </div>
    </>
);


// ... (previous code)

export default function TextInput({
    handleChange,
    id,
    cate,
    inputTask,
    handleCreateTask,
    handleDeleteTask,
    tasks,
    children,
}) {
    return (
        <div key={id}>
            <button>{cate}</button>
            <input
                type="text"
                name="todo"
                value={inputTask}
                placeholder="Enter your task"
                onChange={handleChange}
            />
            <button onClick={handleCreateTask}>Add task</button>
            <ul className="todolists">
                {tasks.map((todo) => (
                    <li className="task" key={todo.id}>
                        <input type="checkbox" name="" id="" /> {todo.todo}
                        <button onClick={() => handleDeleteTask(todo.id)}>Delete</button>
                    </li>
                ))}
            </ul>
            <br />
            {children}
        </div>
    );
}


let request;
let db;
let version = 1;

export const Stores = {
  Users: 'users',
};

export const initDB = () => {
  return new Promise((resolve) => {
    // open the connection
    request = indexedDB.open('myDB');

    request.onupgradeneeded = () => {
      db = request.result;

      // if the data object store doesn't exist, create it
      if (!db.objectStoreNames.contains(Stores.Users)) {
        console.log('Creating users store');
        db.createObjectStore(Stores.Users, { keyPath: 'id' });
      }
      // no need to resolve here
    };

    request.onsuccess = () => {
      db = request.result;
      version = db.version;
      console.log('request.onsuccess - initDB', version);
      resolve(true);
    };

    request.onerror = () => {
      resolve(false);
    };
  });
};

//second step
import React, { useState } from 'react';
import { initDB } from '../lib/db';

export default function Home() {
  const [isDBReady, setIsDBReady] = useState(false);

  const handleInitDB = async () => {
    const status = await initDB();
    setIsDBReady(status);
  };

  return (
    <main style={{ textAlign: 'center', marginTop: '3rem' }}>
      <h1>IndexedDB</h1>
      {!isDBReady ? (
        <button onClick={handleInitDB}>Init DB</button>
      ) : (
        <h2>DB is ready</h2>
      )}
    </main>
  );
}

//next
export const addData = (storeName, data) => {
    return new Promise((resolve) => {
      request = indexedDB.open('myDB', version);
  
      request.onsuccess = () => {
        console.log('request.onsuccess - addData', data);
        db = request.result;
        const tx = db.transaction(storeName, 'readwrite');
        const store = tx.objectStore(storeName);
        store.add(data);
        resolve(data);
      };
  
      request.onerror = () => {
        const error = request.error?.message;
        if (error) {
          resolve(error);
        } else {
          resolve('Unknown error');
        }
      };
    });
  };
  
  //next

  // Home component
const handleAddUser = async (e) => {
    e.preventDefault();
  
    const target = e.target;
    const name = target.name.value;
    const email = target.email.value;
    const id = Date.now();
  
    if (name.trim() === '' || email.trim() === '') {
      alert('Please enter a valid name and email');
      return;
    }
  
    try {
      const res = await addData(Stores.Users, { name, email, id });
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Something went wrong');
      }
    }
  };
  
  // ...
  
  {!isDBReady ? (
    <button onClick={handleInitDB}>Init DB</button>
  ) : (
    <>
      <h2>DB is ready</h2>
      {/* add user form */}
      <form onSubmit={handleAddUser}>
        <input type="text" name="name" placeholder="Name" />
        <input type="email" name="email" placeholder="Email" />
        <button type="submit">Add User</button>
      </form>
      {error && <p style={{ color: 'red' }}>{error}</p>}
    </>
  )}
//next
export const getStoreData = (storeName) => {
    return new Promise((resolve) => {
      request = indexedDB.open('myDB');
  
      request.onsuccess = () => {
        console.log('request.onsuccess - getAllData');
        db = request.result;
        const tx = db.transaction(storeName, 'readonly');
        const store = tx.objectStore(storeName);
        const res = store.getAll();
        res.onsuccess = () => {
          resolve(res.result);
        };
      };
    });
  };
//next

// ourComponent.jsx
const [users, setUsers] = useState([]);

// declare this async method
const handleGetUsers = async () => {
  const usersData = await getStoreData(Stores.Users);
  setUsers(usersData);
};

// jsx
return (
  // ... rest
  {users.length > 0 && (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Email</th>
          <th>ID</th>
        </tr>
      </thead>
      <tbody>
        {users.map((user) => (
          <tr key={user.id}>
            <td>{user.name}</td>
            <td>{user.email}</td>
            <td>{user.id}</td>
          </tr>
        ))}
      </tbody>
    </table>
  )}
  // rest
);


//next
const handleAddUser = async (e) => {
    // ...
    try {
      const res = await addData(Stores.Users, { name, email, id });
      // refetch users after creating data
      handleGetUsers();
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Something went wrong');
      }
    }
  };

  //next
  // db.js/initDb
db.createObjectStore(Stores.Users, { keyPath: 'id' });

//next
export const deleteData = (storeName, key) => {
    return new Promise((resolve) => {
      // open the connection
      request = indexedDB.open('myDB', version);
  
      request.onsuccess = () => {
        console.log('request.onsuccess - deleteData', key);
        db = request.result;
        const tx = db.transaction(storeName, 'readwrite');
        const store = tx.objectStore(storeName);
        const res = store.delete(key);
  
        // add listeners that will resolve the Promise
        res.onsuccess = () => {
          resolve(true);
        };
        res.onerror = () => {
          resolve(false);
        };
      };
    });
  };

  //next
  const handleRemoveUser = async (id) => {
    try {
      await deleteData(Stores.Users, id);
      // refetch users after deleting data
      handleGetUsers();
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Something went wrong deleting the user');
      }
    }
  };
  
  // ...
  
  return (
    // ...
    {users.length > 0 && (
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>ID</th>
            {/* header */}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.name}</td>
              <td>{user.email}</td>
              <td>{user.id}</td>
              {/* here the button */}
              <td>
                <button onClick={() => handleRemoveUser(user.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    )}
  );
  